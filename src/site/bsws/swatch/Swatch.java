package site.bsws.swatch;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Arindam Biswas <arindam dot b at eml dot cc>
 */
public class Swatch extends JPanel {

    private static final int SIZE = 420;
    private float shift;
    private int bandCount;
    private final BufferedImage image;
    private final Timer timer;

    /**
     * Creates new form Swatch
     */
    public Swatch() {
        super();
        initComponents();
        image = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_RGB);
        bandCount = 3;
        shift = 0.007f;
        initImage(image);
        timer = new Timer(25, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                shiftHue();
            }
        });
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponents(g);
        synchronized (image) {
            g.drawImage(image, 0, 0, null);
        }
    }

    private void initImage(BufferedImage image) {
        Graphics g = image.getGraphics();
        int strideX = SIZE / bandCount, strideY = SIZE / bandCount;
        g.setPaintMode();
        for (int i = 0; i < bandCount; i++) {
            for (int j = 0; j < bandCount; j++) {
                g.setColor(Color.decode(Integer.toString((int) (Math.random() * 0x01000000))));
                g.fillRect(strideX * i, strideY * j, strideX, strideY);
            }
        }
    }

    private void shiftHue() {
        synchronized (image) {
            Graphics g = image.getGraphics();
            int strideX = SIZE / bandCount, strideY = SIZE / bandCount;
            for (int i = 0; i < bandCount; i++) {
                for (int j = 0; j < bandCount; j++) {
                    g.setColor(new Color(changeHSB(image.getRGB(strideX * i, strideY * j),
                            shift, 0, 0)));
                    g.fillRect(strideX * i, strideY * j, strideX, strideY);
                }
            }
        }
        repaint();
    }

    int changeHSB(int rgb, float dh, float ds, float db) {
        float[] hsb = new float[3];
        Color.RGBtoHSB((rgb & 0x00ff0000) >> 16, (rgb & 0x0000ff00) >> 8, rgb & 0x000000ff, hsb);
        return Color.HSBtoRGB(hsb[0] + dh, hsb[1] + ds, hsb[2] + db);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(420, 420));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        switch (evt.getButton()) {
            case MouseEvent.BUTTON1:
                if (timer.isRunning()) {
                    timer.stop();
                } else {
                    timer.start();
                }
                return;
            case MouseEvent.BUTTON2:
                if (timer.isRunning()) {
                    timer.stop();
                }
                initImage(image);
                repaint();
                return;
            case MouseEvent.BUTTON3: // Revert to default settings.
                bandCount = 3;
                shift = 0.007f;
                if (timer.isRunning()) {
                    timer.stop();
                }
                initImage(image);
        }
    }//GEN-LAST:event_formMouseClicked

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        boolean caught = true;
        switch (evt.getKeyChar()) {
            case '2':
                bandCount = 2;
                break;
            case '3':
                bandCount = 3;
                break;
            case '4':
                bandCount = 4;
                break;
            case '5':
                bandCount = 5;
                break;
            case '6':
                bandCount = 6;
                break;
            case '7':
                bandCount = 7;
                break;
            case 'S': // Increase animation speed.
                if (timer.getDelay() > 400) {
                    timer.setDelay(timer.getDelay() - 100);
                } else if (!(timer.getDelay() < 10)) {
                    timer.setDelay(timer.getDelay() - 5);
                }
                return;
            case 's': // Decrease animation speed.
                if (timer.getDelay() > 400) {
                    timer.setDelay(timer.getDelay() + 100);
                } else {
                    timer.setDelay(timer.getDelay() + 5);
                }
                return;
            case 'c': // Increase animation coarseness.
                shift += 0.001;
                return;
            case 'C': // Decrease animation coarseness.
                if (!(shift < 0.002)) {
                    shift -= 0.001;
                }
                return;
            default:
                caught = false;
        }
        if (!caught) {
            return;
        }
        if (timer.isRunning()) {
            timer.stop();
        }
        initImage(image);
        repaint();
    }//GEN-LAST:event_formKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
